rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isCompanyMember(companyId) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Settings collection - only admins can write, but all authenticated users can read
    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Companies collection
    match /companies/{companyId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated(); 
      allow update: if isCompanyMember(companyId) && isAdmin();
      allow delete: if isAdmin();
      
      // Company subcollections (including nested kudos)
      match /kudos/{kudoId} {
        allow read: if isCompanyMember(companyId);
        allow create: if isCompanyMember(companyId) && 
          request.resource.data.senderId == request.auth.uid;
        allow update: if isCompanyMember(companyId) && 
          (request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['likes', 'comments']));
        allow delete: if isCompanyMember(companyId) && isAdmin();
      }
      
      // Company directory - only available to company members
      match /directory/{employeeId} {
        allow read: if isCompanyMember(companyId);
        allow create, update: if isCompanyMember(companyId) && isAdmin();
        allow delete: if isCompanyMember(companyId) && isAdmin();
      }
      
      // Other company subcollections
      match /{subcollection}/{document} {
        allow read: if isCompanyMember(companyId);
        allow write: if isCompanyMember(companyId) && isAdmin();
      }
    }

    // Root-level kudos collection 
    match /kudos/{kudoId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid;
      allow update: if isAuthenticated() && 
        (request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['likes', 'comments']));
      allow delete: if isAdmin();
    }

    // Employees collection
    match /employees/{employeeId} {
      // Allow employees to read other employees in their company
      allow read: if isAuthenticated() && 
        (getUserData().companyId == resource.data.companyId || isAdmin());
      
      // Admins can create/update employees, users can update their own profile
      allow create: if isAdmin();
      allow update: if isAdmin() || (isOwner(employeeId) && 
        // Users can only update certain fields of their own profile
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['displayName', 'photoURL', 'bio', 'skills']));
      allow delete: if isAdmin();
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if request.auth.uid == userId; // Allow users to create their own profiles
      allow update: if isAdmin() || isOwner(userId);
      allow delete: if isAdmin();
    }

    // Dashboard access collection (for access control)
    match /dashboards/{dashboardId} {
      allow read: if isAuthenticated() && (
        // Employee dashboards - all authenticated users can access their own
        (resource.data.type == 'employee' && 
         (resource.data.userId == request.auth.uid || isAdmin())) ||
        // Admin dashboards - only admins can access
        (resource.data.type == 'admin' && isAdmin())
      );
      allow write: if isAdmin();
    }

    // Rewards collection
    match /rewards/{rewardId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAdmin() || resource.data.userId == request.auth.uid;
    }
  }
}
